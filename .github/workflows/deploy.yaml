name: FF Tool CI/CD

on:
  push:
    branches:
      - main

env:
  STACK_NAME: ECSreactStack
  ACTION: create

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPO_NAME: react-ecr
      ECR_REPO_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/react-ecr
      IMAGE_TAG: latest
      IMAGE_SHA: ${{ github.sha }}
      CLUSTER_NAME: react-cluster
      SERVICE_NAME: react-service
      TASK_FAMILY: react-task
      CONTAINER_NAME: react-container
      LOG_GROUP: /ecs/react-logs

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies and build React app
        run: |
          npm install
          npm run build

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        run: |
          docker build -t $ECR_REPO_URI:$IMAGE_TAG -t $ECR_REPO_URI:$IMAGE_SHA .
          docker push $ECR_REPO_URI:$IMAGE_TAG
          docker push $ECR_REPO_URI:$IMAGE_SHA

      - name: Deploy or Update CloudFormation Stack
        run: |
          echo "Checking CloudFormation stack status..."
          
          # Get stack status
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NOT_FOUND")

          if [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" ]]; then
            echo "Stack is in ROLLBACK_COMPLETE state. Deleting it..."
            aws cloudformation delete-stack --stack-name ${{ env.STACK_NAME }}
            
            echo "Waiting for stack deletion..."
            aws cloudformation wait stack-delete-complete --stack-name ${{ env.STACK_NAME }}
            
            echo "Stack deleted. Proceeding with new deployment..."
            aws cloudformation create-stack \
              --stack-name ${{ env.STACK_NAME }} \
              --template-body file://cloudformation/ecs_cluster.yaml \
              --capabilities CAPABILITY_NAMED_IAM
            
            echo "Waiting for stack creation to complete..."
            aws cloudformation wait stack-create-complete --stack-name ${{ env.STACK_NAME }}
          
          elif [[ "$STACK_STATUS" == "NOT_FOUND" ]]; then
            echo "Stack does not exist. Creating a new stack..."
            aws cloudformation create-stack \
              --stack-name ${{ env.STACK_NAME }} \
              --template-body file://cloudformation/ecs_cluster.yaml \
              --capabilities CAPABILITY_NAMED_IAM
            
            echo "Waiting for stack creation to complete..."
            aws cloudformation wait stack-create-complete --stack-name ${{ env.STACK_NAME }}

          else
            echo "Stack exists and is in a valid state ($STACK_STATUS). Attempting update..."
            set +e
            aws cloudformation update-stack \
              --stack-name ${{ env.STACK_NAME }} \
              --template-body file://cloudformation/ecs_cluster.yaml \
              --capabilities CAPABILITY_NAMED_IAM

            if [ $? -eq 0 ]; then
              echo "Update initiated successfully. Waiting for completion..."
              aws cloudformation wait stack-update-complete --stack-name ${{ env.STACK_NAME }}
            else
              echo "No updates are needed or an error occurred."
            fi
          fi

      - name: Deploy to ECS
        run: |
          aws ecs register-task-definition \
            --family $TASK_FAMILY \
            --requires-compatibilities FARGATE \
            --network-mode awsvpc \
            --task-role-arn arn:aws:iam::$AWS_ACCOUNT_ID:role/ECSExecutionRole \
            --execution-role-arn arn:aws:iam::$AWS_ACCOUNT_ID:role/ECSExecutionRole \
            --memory "8192" \
            --cpu "4096" \
            --container-definitions '[
              {
                "name": "'$CONTAINER_NAME'",
                "image": "'$ECR_REPO_URI':'$IMAGE_SHA'",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 3000,
                    "protocol": "tcp"
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "'$LOG_GROUP'",
                    "awslogs-region": "'$AWS_REGION'",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]'

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment \
            --output json
